version: '3.8'

networks:
  localNetwork:
    external: true

services:
  rabbitmq:
    image: rabbitmq:3.8-management-alpine
    container_name: "rabbitmq"
    environment:
      - RABBITMQ_DEFAULT_USER=user
      - RABBITMQ_DEFAULT_PASS=password
    ports:
      - '5672:5672'
      - '15672:15672'
    restart: always
    volumes:
      - rabbit:/var/lib/rabbitmq/
      - rabbit:/var/log/rabbitmq
    networks:
      - localNetwork

  mssql_db:
    container_name: "MSSQL_SERVER"
    image: mcr.microsoft.com/mssql/server:2022-latest
    ports:
      - "1433:1433"
    restart: always
    environment:
      - SA_PASSWORD=Pa55w0rd2023
      - ACCEPT_EULA=Y
    volumes:
      - mssql-db:/data/db
    networks:
      - localNetwork

  postgresql_db:
    image: postgres:latest
    container_name: "POSTGRESQL_SERVER"
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=rootroot
    ports:
      - "5433:5432"
    restart: always
    volumes:
      - postgresql-db:/data/db
    networks:
      - localNetwork

  mongo_db:
    image: mongo
    container_name: "MONGO_SERVER"
    restart: always
    ports:
      - "27018:27017"
    volumes:
      - mongo-db:/data/db
    networks:
      - localNetwork

  _gateway:
    image: docker.io/library/gateway-image
    container_name: "GATEWAY"
    restart: always
    ports:
      - "5267:80"
    build:
      context: ./Gateway
      dockerfile: Gateway.Api/Dockerfile
    depends_on:
      - auth-app
      - offices-app
      - profiles-app
      - services-app
      - appointments-app
      - documents-app
    networks:
      - localNetwork



  auth-app:
    image: docker.io/library/auth-image
    depends_on:
      - mssql_db
    container_name: auth-app-microservice
    ports:
      - "8083:80"
    restart: always
    build:
      context: ./Auth
      dockerfile: Auth.Api/Dockerfile
    environment:
      - ConnectionStrings__DefaultConnection=Server=mssql_db;Database=AuthDB;User Id=sa;Password=Pa55w0rd2023;TrustServerCertificate=True;
    networks:
      - localNetwork

  offices-app:
    image: docker.io/library/office-image
    depends_on:
      - mongo_db
    container_name: office-app-microservice
    ports:
      - "8084:80"
    restart: always
    build:
      context: ./Offices
      dockerfile: Offices.Api/Dockerfile
    environment:
      - OfficeDatabase__ConnectionString=mongodb://mongo_db:27017
      - OfficeDatabase__DatabaseName=OfficesDB
      - OfficeDatabase__OfficesCollectionName=Offices
    networks:
      - localNetwork


  profiles-app:
    image: docker.io/library/profile-image
    depends_on:
      - mssql_db
    container_name: profile-app-microservice
    ports:
      - "8085:80"
    restart: always
    build:
      context: ./Profiles
      dockerfile: Profiles.Api/Dockerfile
    environment:
      - ConnectionStrings__DefaultConnection=Server=mssql_db;Database=ProfilesDB;User Id=sa;Password=Pa55w0rd2023;TrustServerCertificate=True;
    networks:
      - localNetwork

  services-app:
    image: docker.io/library/service-image
    depends_on:
      - mssql_db
    container_name: service-app-microservice
    ports:
      - "8086:80"
    restart: always
    build:
      context: ./Services
      dockerfile: Services.Api/Dockerfile
    environment:
      - ConnectionStrings__DefaultConnection=Server=mssql_db;Database=ServicesDB;User Id=sa;Password=Pa55w0rd2023;TrustServerCertificate=True;
    networks:
      - localNetwork

  appointments-app:
    image: docker.io/library/appointment-image
    depends_on:
      - postgresql_db
      - rabbitmq
    container_name: appointment-app-microservice
    ports:
      - "8087:80"
    restart: always
    build:
      context: ./Appointments
      dockerfile: Appointments.Api/Dockerfile
    environment:
      - ConnectionStrings__DefaultConnection=User ID=postgres;Password=rootroot;Server=postgresql_db;Port=5432;Database=AppointmentsDB; IntegratedSecurity=true;Pooling=true;
    networks:
      - localNetwork

  documents-app:
    image: docker.io/library/document-image
    depends_on:
      - postgresql_db
      - rabbitmq
    container_name: document-app-microservice
    ports:
      - "8088:80"
    restart: always
    build:
      context: ./Documents
      dockerfile: Documents.Api/Dockerfile
    environment:
      - ConnectionStrings__DefaultConnection=User ID=postgres;Password=rootroot;Server=postgresql_db;Port=5432;Database=DocumentsDB; IntegratedSecurity=true;Pooling=true;
    networks:
      - localNetwork

volumes:
  rabbit:
  mssql-db:
  postgresql-db:
  mongo-db: